//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Bewoning.Api.Generated
{
    using System = global::System;

    

    [JsonInheritanceConverter(typeof(BewoningenQuery), "type")]
    [JsonInheritanceAttribute("BewoningMetPeildatum", typeof(BewoningMetPeildatum))]
    [JsonInheritanceAttribute("BewoningMetPeriode", typeof(BewoningMetPeriode))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BewoningenQuery
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BewoningMetPeildatum : BewoningenQuery
    {
        /// <summary>
        /// de datum waarover de bewoning wordt opgevraagd.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("peildatum")]
        public string Peildatum { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adresseerbaarObjectIdentificatie")]
        public string AdresseerbaarObjectIdentificatie { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BewoningMetPeriode : BewoningenQuery
    {
        /// <summary>
        /// de begindatum van de periode waarover de bewoning wordt opgevraagd.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datumVan")]
        public string DatumVan { get; set; }

        /// <summary>
        /// de einddatum van de periode waarover de bewoning wordt opgevraagd.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datumTot")]
        public string DatumTot { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adresseerbaarObjectIdentificatie")]
        public string AdresseerbaarObjectIdentificatie { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GbaBewoningenQueryResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("bewoningen")]
        public System.Collections.Generic.ICollection<GbaBewoning> Bewoningen { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Terugmelding bij een fout. JSON representatie in lijn met [RFC7807](https://tools.ietf.org/html/rfc7807).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Foutbericht
    {
        /// <summary>
        /// Link naar meer informatie over deze fout
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public System.Uri Type { get; set; }

        /// <summary>
        /// Beschrijving van de fout
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// Details over de fout
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// Uri van de aanroep die de fout heeft veroorzaakt
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public System.Uri Instance { get; set; }

        /// <summary>
        /// Systeemcode die het type fout aangeeft
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Periode
    {
        /// <summary>
        /// De begindatum van de periode.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datumVan")]
        public string DatumVan { get; set; }

        /// <summary>
        /// De einddatum van de periode.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datumTot")]
        public string DatumTot { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InOnderzoek
    {

        [System.Text.Json.Serialization.JsonPropertyName("aanduidingGegevensInOnderzoek")]
        public string AanduidingGegevensInOnderzoek { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("datumIngangOnderzoek")]
        public string DatumIngangOnderzoek { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Waardetabel
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("omschrijving")]
        public string Omschrijving { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Geslachtsaanduiding : Waardetabel
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdellijkeTitelPredicaatSoort
    {

        [System.Runtime.Serialization.EnumMember(Value = @"titel")]
        Titel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"predicaat")]
        Predicaat = 1,

    }

    /// <summary>
    /// Wordt gevuld met waarden uit de landelijke tabel 'Adellijke titel/predicaat'. De property soort geeft aan of het een 'predicaat' of een 'titel' is.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdellijkeTitelPredicaatType : Waardetabel
    {

        [System.Text.Json.Serialization.JsonPropertyName("soort")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AdellijkeTitelPredicaatSoort Soort { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaamBasis
    {

        [System.Text.Json.Serialization.JsonPropertyName("voornamen")]
        public string Voornamen { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("adellijkeTitelPredicaat")]
        public AdellijkeTitelPredicaatType AdellijkeTitelPredicaat { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("voorvoegsel")]
        public string Voorvoegsel { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geslachtsnaam")]
        public string Geslachtsnaam { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeboorteBasis
    {
        /// <summary>
        /// Datum waarop de persoon is geboren.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("datum")]
        public string Datum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GbaBewoner
    {

        [System.Text.Json.Serialization.JsonPropertyName("burgerservicenummer")]
        public string Burgerservicenummer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geheimhoudingPersoonsgegevens")]
        public int GeheimhoudingPersoonsgegevens { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("verblijfplaatsInOnderzoek")]
        public InOnderzoek VerblijfplaatsInOnderzoek { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geslacht")]
        public Geslachtsaanduiding Geslacht { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("naam")]
        public NaamBasis Naam { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("geboorte")]
        public GeboorteBasis Geboorte { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Een bewoning geeft aan welke personen in een periode (mogelijk) op een adresseerbaar object staan ingeschreven.
    /// <br/>
    /// <br/>Een persoon is een mogelijke bewoner als niet met zekerheid kan worden bepaald of de persoon in de bewoningperiode op het adresseerbaar object staat/stond ingeschreven.
    /// <br/>Dit is het geval als de datum aanvang of de datum einde van de inschrijving geheel of deels onbekend is, en de onzekerheidsperiode overlapt de bewoningperiode.
    /// <br/>
    /// <br/>Wanneer een bewoning in totaal meer dan 100 bewoners en/of mogelijke bewoners heeft, wordt het **indicatieVeelBewoners** veld geleverd.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GbaBewoning
    {

        [System.Text.Json.Serialization.JsonPropertyName("adresseerbaarObjectIdentificatie")]
        public string AdresseerbaarObjectIdentificatie { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("periode")]
        public Periode Periode { get; set; }

        /// <summary>
        /// De personen die in de bewoning periode staan ingeschreven op het adresseerbaar object.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bewoners")]
        public System.Collections.Generic.ICollection<GbaBewoner> Bewoners { get; set; }

        /// <summary>
        /// De personen die in de bewoning periode mogelijk staan ingeschreven op het adresseerbaar object.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mogelijkeBewoners")]
        public System.Collections.Generic.ICollection<GbaBewoner> MogelijkeBewoners { get; set; }

        /// <summary>
        /// Geeft aan dat de bewoning in totaal meer dan 100 bewoners en/of mogelijke bewoners heeft.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("indicatieVeelBewoners")]
        public bool IndicatieVeelBewoners { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details over fouten in opgegeven parameters
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvalidParam
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public System.Uri Type { get; set; }

        /// <summary>
        /// Naam van de parameter
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Systeemcode die het type fout aangeeft
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Beschrijving van de fout op de parameterwaarde
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reason")]
        public string Reason { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadRequestFoutbericht : Foutbericht
    {
        /// <summary>
        /// Foutmelding per fout in een parameter. Alle gevonden fouten worden één keer teruggemeld.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invalidParams")]
        public System.Collections.Generic.ICollection<InvalidParam> InvalidParams { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class JsonInheritanceConverterAttribute : System.Text.Json.Serialization.JsonConverterAttribute
    {
        public string DiscriminatorName { get; }

        public JsonInheritanceConverterAttribute(System.Type baseType, string discriminatorName = "discriminator")
            : base(typeof(JsonInheritanceConverter<>).MakeGenericType(baseType))
        {
            DiscriminatorName = discriminatorName;
        }
    }

    public class JsonInheritanceConverter<TBase> : System.Text.Json.Serialization.JsonConverter<TBase>
    {
        private readonly string _discriminatorName;

        public JsonInheritanceConverter()
        {
            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<JsonInheritanceConverterAttribute>(typeof(TBase));
            _discriminatorName = attribute?.DiscriminatorName ?? "discriminator";
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override TBase Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var document = System.Text.Json.JsonDocument.ParseValue(ref reader);
            var hasDiscriminator = document.RootElement.TryGetProperty(_discriminatorName, out var discriminator);
            var subtype = GetDiscriminatorType(document.RootElement, typeToConvert, hasDiscriminator ? discriminator.GetString() : null);

            var bufferWriter = new System.IO.MemoryStream();
            using (var writer = new System.Text.Json.Utf8JsonWriter(bufferWriter))
            {
                document.RootElement.WriteTo(writer);
            }

            return (TBase)System.Text.Json.JsonSerializer.Deserialize(bufferWriter.ToArray(), subtype, options);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, TBase value, System.Text.Json.JsonSerializerOptions options)
        {
            if (value != null)
            {
                writer.WriteStartObject();
                writer.WriteString(_discriminatorName, GetDiscriminatorValue(value.GetType()));

                var bytes = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes((object)value, options);
                var document = System.Text.Json.JsonDocument.Parse(bytes);
                foreach (var property in document.RootElement.EnumerateObject())
                {
                    property.WriteTo(writer);
                }

                writer.WriteEndObject();
            }
            else
            {
                writer.WriteNullValue();
            }
        }

        public string GetDiscriminatorValue(System.Type type)
        {
            var jsonInheritanceAttributeDiscriminator = GetSubtypeDiscriminator(type);
            if (jsonInheritanceAttributeDiscriminator != null)
            {
                return jsonInheritanceAttributeDiscriminator;
            }

            return type.Name;
        }

        protected System.Type GetDiscriminatorType(System.Text.Json.JsonElement jObject, System.Type objectType, string discriminatorValue)
        {
            if (discriminatorValue != null)
            {
                var jsonInheritanceAttributeSubtype = GetObjectSubtype(objectType, discriminatorValue);
                if (jsonInheritanceAttributeSubtype != null)
                {
                    return jsonInheritanceAttributeSubtype;
                }

                if (objectType.Name == discriminatorValue)
                {
                    return objectType;
                }

                var typeName = objectType.Namespace + "." + discriminatorValue;
                var subtype = System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType).Assembly.GetType(typeName);
                if (subtype != null)
                {
                    return subtype;
                }
            }

            throw new System.InvalidOperationException("Could not find subtype of '" + objectType.Name + "' with discriminator '" + discriminatorValue + "'.");
        }

        private System.Type GetObjectSubtype(System.Type baseType, string discriminatorValue)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(baseType), true))
            {
                if (attribute.Key == discriminatorValue)
                    return attribute.Type;
            }

            return null;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return null;
        }
    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625